// Code generated by protoc-gen-go.
// source: api.proto
// DO NOT EDIT!

/*
Package pbgen is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	Error
	AliPayRequest
	AliPayResponse
	WxPayRequest
	WxPayResponse
*/
package pbgen

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Error struct {
	Msg string `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Error) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type AliPayRequest struct {
	ReturnURL   string `protobuf:"bytes,1,opt,name=returnURL" json:"returnURL,omitempty"`
	Subject     string `protobuf:"bytes,2,opt,name=subject" json:"subject,omitempty"`
	OutTradeNo  string `protobuf:"bytes,3,opt,name=outTradeNo" json:"outTradeNo,omitempty"`
	TotalAmount string `protobuf:"bytes,4,opt,name=totalAmount" json:"totalAmount,omitempty"`
	ProductCode string `protobuf:"bytes,5,opt,name=productCode" json:"productCode,omitempty"`
}

func (m *AliPayRequest) Reset()                    { *m = AliPayRequest{} }
func (m *AliPayRequest) String() string            { return proto.CompactTextString(m) }
func (*AliPayRequest) ProtoMessage()               {}
func (*AliPayRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AliPayRequest) GetReturnURL() string {
	if m != nil {
		return m.ReturnURL
	}
	return ""
}

func (m *AliPayRequest) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *AliPayRequest) GetOutTradeNo() string {
	if m != nil {
		return m.OutTradeNo
	}
	return ""
}

func (m *AliPayRequest) GetTotalAmount() string {
	if m != nil {
		return m.TotalAmount
	}
	return ""
}

func (m *AliPayRequest) GetProductCode() string {
	if m != nil {
		return m.ProductCode
	}
	return ""
}

type AliPayResponse struct {
	Url   string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	Error *Error `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *AliPayResponse) Reset()                    { *m = AliPayResponse{} }
func (m *AliPayResponse) String() string            { return proto.CompactTextString(m) }
func (*AliPayResponse) ProtoMessage()               {}
func (*AliPayResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AliPayResponse) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *AliPayResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type WxPayRequest struct {
	Body           string `protobuf:"bytes,2,opt,name=body" json:"body,omitempty"`
	TradeType      string `protobuf:"bytes,4,opt,name=tradeType" json:"tradeType,omitempty"`
	OpenId         string `protobuf:"bytes,5,opt,name=openId" json:"openId,omitempty"`
	SpbillCreateIp string `protobuf:"bytes,6,opt,name=spbillCreateIp" json:"spbillCreateIp,omitempty"`
	TotalFee       int32  `protobuf:"varint,7,opt,name=totalFee" json:"totalFee,omitempty"`
	OutTradeNO     string `protobuf:"bytes,8,opt,name=outTradeNO" json:"outTradeNO,omitempty"`
}

func (m *WxPayRequest) Reset()                    { *m = WxPayRequest{} }
func (m *WxPayRequest) String() string            { return proto.CompactTextString(m) }
func (*WxPayRequest) ProtoMessage()               {}
func (*WxPayRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *WxPayRequest) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *WxPayRequest) GetTradeType() string {
	if m != nil {
		return m.TradeType
	}
	return ""
}

func (m *WxPayRequest) GetOpenId() string {
	if m != nil {
		return m.OpenId
	}
	return ""
}

func (m *WxPayRequest) GetSpbillCreateIp() string {
	if m != nil {
		return m.SpbillCreateIp
	}
	return ""
}

func (m *WxPayRequest) GetTotalFee() int32 {
	if m != nil {
		return m.TotalFee
	}
	return 0
}

func (m *WxPayRequest) GetOutTradeNO() string {
	if m != nil {
		return m.OutTradeNO
	}
	return ""
}

type WxPayResponse struct {
	ReturnCode string `protobuf:"bytes,1,opt,name=ReturnCode" json:"ReturnCode,omitempty"`
	ReturnMsg  string `protobuf:"bytes,2,opt,name=ReturnMsg" json:"ReturnMsg,omitempty"`
	AppId      string `protobuf:"bytes,3,opt,name=AppId" json:"AppId,omitempty"`
	MchId      string `protobuf:"bytes,4,opt,name=MchId" json:"MchId,omitempty"`
	NonceStr   string `protobuf:"bytes,5,opt,name=NonceStr" json:"NonceStr,omitempty"`
	Sign       string `protobuf:"bytes,6,opt,name=Sign" json:"Sign,omitempty"`
	ResultCode string `protobuf:"bytes,7,opt,name=ResultCode" json:"ResultCode,omitempty"`
	PrepayId   string `protobuf:"bytes,8,opt,name=PrepayId" json:"PrepayId,omitempty"`
	TradeType  string `protobuf:"bytes,9,opt,name=TradeType" json:"TradeType,omitempty"`
	Error      *Error `protobuf:"bytes,10,opt,name=error" json:"error,omitempty"`
}

func (m *WxPayResponse) Reset()                    { *m = WxPayResponse{} }
func (m *WxPayResponse) String() string            { return proto.CompactTextString(m) }
func (*WxPayResponse) ProtoMessage()               {}
func (*WxPayResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *WxPayResponse) GetReturnCode() string {
	if m != nil {
		return m.ReturnCode
	}
	return ""
}

func (m *WxPayResponse) GetReturnMsg() string {
	if m != nil {
		return m.ReturnMsg
	}
	return ""
}

func (m *WxPayResponse) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *WxPayResponse) GetMchId() string {
	if m != nil {
		return m.MchId
	}
	return ""
}

func (m *WxPayResponse) GetNonceStr() string {
	if m != nil {
		return m.NonceStr
	}
	return ""
}

func (m *WxPayResponse) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

func (m *WxPayResponse) GetResultCode() string {
	if m != nil {
		return m.ResultCode
	}
	return ""
}

func (m *WxPayResponse) GetPrepayId() string {
	if m != nil {
		return m.PrepayId
	}
	return ""
}

func (m *WxPayResponse) GetTradeType() string {
	if m != nil {
		return m.TradeType
	}
	return ""
}

func (m *WxPayResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func init() {
	proto.RegisterType((*Error)(nil), "pbgen.Error")
	proto.RegisterType((*AliPayRequest)(nil), "pbgen.AliPayRequest")
	proto.RegisterType((*AliPayResponse)(nil), "pbgen.AliPayResponse")
	proto.RegisterType((*WxPayRequest)(nil), "pbgen.WxPayRequest")
	proto.RegisterType((*WxPayResponse)(nil), "pbgen.WxPayResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Payment service

type PaymentClient interface {
	AliPay(ctx context.Context, in *AliPayRequest, opts ...grpc.CallOption) (*AliPayResponse, error)
	WxPay(ctx context.Context, in *WxPayRequest, opts ...grpc.CallOption) (*WxPayResponse, error)
}

type paymentClient struct {
	cc *grpc.ClientConn
}

func NewPaymentClient(cc *grpc.ClientConn) PaymentClient {
	return &paymentClient{cc}
}

func (c *paymentClient) AliPay(ctx context.Context, in *AliPayRequest, opts ...grpc.CallOption) (*AliPayResponse, error) {
	out := new(AliPayResponse)
	err := grpc.Invoke(ctx, "/pbgen.Payment/AliPay", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) WxPay(ctx context.Context, in *WxPayRequest, opts ...grpc.CallOption) (*WxPayResponse, error) {
	out := new(WxPayResponse)
	err := grpc.Invoke(ctx, "/pbgen.Payment/WxPay", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Payment service

type PaymentServer interface {
	AliPay(context.Context, *AliPayRequest) (*AliPayResponse, error)
	WxPay(context.Context, *WxPayRequest) (*WxPayResponse, error)
}

func RegisterPaymentServer(s *grpc.Server, srv PaymentServer) {
	s.RegisterService(&_Payment_serviceDesc, srv)
}

func _Payment_AliPay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AliPayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).AliPay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbgen.Payment/AliPay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).AliPay(ctx, req.(*AliPayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_WxPay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WxPayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).WxPay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbgen.Payment/WxPay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).WxPay(ctx, req.(*WxPayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Payment_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pbgen.Payment",
	HandlerType: (*PaymentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AliPay",
			Handler:    _Payment_AliPay_Handler,
		},
		{
			MethodName: "WxPay",
			Handler:    _Payment_WxPay_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 456 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0xcd, 0x6a, 0xdb, 0x40,
	0x10, 0x46, 0x49, 0x64, 0xc7, 0x93, 0x1f, 0xca, 0xd6, 0x2d, 0x5b, 0x53, 0x82, 0xd1, 0xa1, 0xe4,
	0xe4, 0x83, 0x4b, 0x1f, 0xc0, 0x84, 0x06, 0x04, 0x4d, 0x62, 0x64, 0x97, 0x9e, 0x25, 0x6b, 0x70,
	0x5d, 0x64, 0xed, 0x76, 0x7f, 0xa0, 0x7a, 0xa2, 0x1e, 0xfa, 0x0a, 0x7d, 0xb8, 0xb2, 0xbb, 0x23,
	0x59, 0x36, 0xf4, 0xb6, 0xdf, 0x37, 0x63, 0xf3, 0xfd, 0x8c, 0x60, 0x94, 0xcb, 0xdd, 0x4c, 0x2a,
	0x61, 0x04, 0x8b, 0x65, 0xb1, 0xc5, 0x3a, 0x79, 0x07, 0xf1, 0x67, 0xa5, 0x84, 0x62, 0xaf, 0xe0,
	0x7c, 0xaf, 0xb7, 0x3c, 0x9a, 0x46, 0xf7, 0xa3, 0xcc, 0x3d, 0x93, 0x3f, 0x11, 0xdc, 0x2c, 0xaa,
	0xdd, 0x32, 0x6f, 0x32, 0xfc, 0x69, 0x51, 0x1b, 0xf6, 0x1e, 0x46, 0x0a, 0x8d, 0x55, 0xf5, 0xd7,
	0xec, 0x0b, 0x6d, 0x1e, 0x08, 0xc6, 0x61, 0xa8, 0x6d, 0xf1, 0x03, 0x37, 0x86, 0x9f, 0xf9, 0x59,
	0x0b, 0xd9, 0x1d, 0x80, 0xb0, 0x66, 0xad, 0xf2, 0x12, 0x9f, 0x05, 0x3f, 0xf7, 0xc3, 0x1e, 0xc3,
	0xa6, 0x70, 0x65, 0x84, 0xc9, 0xab, 0xc5, 0x5e, 0xd8, 0xda, 0xf0, 0x0b, 0xbf, 0xd0, 0xa7, 0xdc,
	0x86, 0x54, 0xa2, 0xb4, 0x1b, 0xf3, 0x20, 0x4a, 0xe4, 0x71, 0xd8, 0xe8, 0x51, 0xc9, 0x23, 0xdc,
	0xb6, 0x62, 0xb5, 0x14, 0xb5, 0x46, 0xe7, 0xc8, 0xaa, 0xaa, 0x75, 0x64, 0x55, 0xc5, 0x12, 0x88,
	0xd1, 0x99, 0xf5, 0xfa, 0xae, 0xe6, 0xd7, 0x33, 0x9f, 0xc1, 0xcc, 0x07, 0x90, 0x85, 0x51, 0xf2,
	0x37, 0x82, 0xeb, 0x6f, 0xbf, 0x7a, 0xa6, 0x19, 0x5c, 0x14, 0xa2, 0x6c, 0xc8, 0x93, 0x7f, 0xbb,
	0x20, 0x8c, 0xd3, 0xbe, 0x6e, 0x24, 0x92, 0xdc, 0x03, 0xc1, 0xde, 0xc2, 0x40, 0x48, 0xac, 0xd3,
	0x92, 0x74, 0x12, 0x62, 0x1f, 0xe0, 0x56, 0xcb, 0x62, 0x57, 0x55, 0x0f, 0x0a, 0x73, 0x83, 0xa9,
	0xe4, 0x03, 0x3f, 0x3f, 0x61, 0xd9, 0x04, 0x2e, 0xbd, 0xf7, 0x47, 0x44, 0x3e, 0x9c, 0x46, 0xf7,
	0x71, 0xd6, 0xe1, 0xa3, 0x28, 0x5f, 0xf8, 0xe5, 0x49, 0x94, 0x2f, 0xc9, 0xef, 0x33, 0xb8, 0x21,
	0xf9, 0x14, 0xc3, 0x1d, 0x40, 0xe6, 0x3b, 0xf2, 0xc9, 0x85, 0x34, 0x7a, 0x8c, 0xf3, 0x12, 0xd0,
	0x93, 0xde, 0x92, 0xc9, 0x03, 0xc1, 0xc6, 0x10, 0x2f, 0xa4, 0x4c, 0x4b, 0x6a, 0x2d, 0x00, 0xc7,
	0x3e, 0x6d, 0xbe, 0xa7, 0x25, 0x79, 0x0f, 0xc0, 0xe9, 0x7e, 0x16, 0xf5, 0x06, 0x57, 0x46, 0x91,
	0xf3, 0x0e, 0xbb, 0x14, 0x57, 0xbb, 0x6d, 0x4d, 0x8e, 0xfd, 0x3b, 0x28, 0xd3, 0xb6, 0x0a, 0x9d,
	0x0e, 0x5b, 0x65, 0x2d, 0xe3, 0xfe, 0x6f, 0xa9, 0x50, 0xe6, 0x4d, 0x5a, 0x92, 0xd3, 0x0e, 0x3b,
	0xd5, 0xeb, 0xae, 0x81, 0x51, 0x50, 0xdd, 0x11, 0x87, 0xa2, 0xe1, 0xbf, 0x45, 0xcf, 0x0d, 0x0c,
	0x97, 0x79, 0xb3, 0xc7, 0xda, 0xb0, 0x4f, 0x30, 0x08, 0xb7, 0xc3, 0xc6, 0xb4, 0x79, 0x74, 0xf7,
	0x93, 0x37, 0x27, 0x2c, 0x25, 0x3b, 0x87, 0xd8, 0x47, 0xcd, 0x5e, 0xd3, 0xbc, 0x7f, 0x37, 0x93,
	0xf1, 0x31, 0x19, 0x7e, 0x53, 0x0c, 0xfc, 0xd7, 0xf7, 0xf1, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x6b, 0x17, 0xb3, 0x1c, 0x8a, 0x03, 0x00, 0x00,
}
